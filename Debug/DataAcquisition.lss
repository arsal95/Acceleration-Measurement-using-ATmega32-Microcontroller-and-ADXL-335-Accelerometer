
DataAcquisition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  008000de  008000de  00000c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e29  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000610  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000923  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082a  00000000  00000000  000031e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003a13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_13>
  38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  8a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AdcInit>:
void TogglePortD(uint8_t Pin)
/*
Toggles the selected pin.
*/
{
	PORTD ^= (1 << Pin);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	86 b9       	out	0x06, r24	; 6
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
  9a:	36 9a       	sbi	0x06, 6	; 6
  9c:	36 99       	sbic	0x06, 6	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <AdcInit+0xa>
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	08 95       	ret

000000a6 <ReadChannel>:
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	90 7e       	andi	r25, 0xE0	; 224
  aa:	8f 71       	andi	r24, 0x1F	; 31
  ac:	89 2b       	or	r24, r25
  ae:	87 b9       	out	0x07, r24	; 7
  b0:	36 9a       	sbi	0x06, 6	; 6
  b2:	36 99       	sbic	0x06, 6	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <ReadChannel+0xc>
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	08 95       	ret

000000bc <PortInit>:
  bc:	87 ee       	ldi	r24, 0xE7	; 231
  be:	81 bb       	out	0x11, r24	; 17
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <ReadPortD>:
uint8_t ReadPortD(uint8_t Pin)
/*
Returns the value of the selected pin.
*/
{
  return(1 & (PIND >> Pin));
  c6:	20 b3       	in	r18, 0x10	; 16
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	a9 01       	movw	r20, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <ReadPortD+0xc>
  ce:	55 95       	asr	r21
  d0:	47 95       	ror	r20
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <ReadPortD+0x8>
  d6:	ca 01       	movw	r24, r20
}
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	08 95       	ret

000000dc <fifo_init>:

void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
/*
FIFO is initialized.
*/
{
  dc:	fc 01       	movw	r30, r24
	f->count = 0;
  de:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;
  e0:	75 83       	std	Z+5, r23	; 0x05
  e2:	64 83       	std	Z+4, r22	; 0x04
  e4:	73 83       	std	Z+3, r23	; 0x03
  e6:	62 83       	std	Z+2, r22	; 0x02
	f->read2end = f->write2end = f->size = size;
  e8:	41 83       	std	Z+1, r20	; 0x01
  ea:	47 83       	std	Z+7, r20	; 0x07
  ec:	46 83       	std	Z+6, r20	; 0x06
  ee:	08 95       	ret

000000f0 <fifo_put>:

uint8_t fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
  f0:	fc 01       	movw	r30, r24
_inline_fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
  f2:	90 81       	ld	r25, Z
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	98 17       	cp	r25, r24
  f8:	b8 f4       	brcc	.+46     	; 0x128 <fifo_put+0x38>
		return 0;
		
	uint8_t * pwrite = f->pwrite;
  fa:	a4 81       	ldd	r26, Z+4	; 0x04
  fc:	b5 81       	ldd	r27, Z+5	; 0x05
	
	*(pwrite++) = data;
  fe:	9d 01       	movw	r18, r26
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	6c 93       	st	X, r22
	
	uint8_t write2end = f->write2end;
 106:	87 81       	ldd	r24, Z+7	; 0x07
	
	if (--write2end == 0)
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <fifo_put+0x22>
	{
		write2end = f->size;
 10c:	81 81       	ldd	r24, Z+1	; 0x01
		pwrite -= write2end;
 10e:	28 1b       	sub	r18, r24
 110:	31 09       	sbc	r19, r1
	}
	
	f->write2end = write2end;
 112:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 114:	35 83       	std	Z+5, r19	; 0x05
 116:	24 83       	std	Z+4, r18	; 0x04

	uint8_t sreg = SREG;
 118:	9f b7       	in	r25, 0x3f	; 63
	cli();
 11a:	f8 94       	cli
	f->count++;
 11c:	80 81       	ld	r24, Z
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 83       	st	Z, r24
	SREG = sreg;
 122:	9f bf       	out	0x3f, r25	; 63
	
	return 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
		return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
	return _inline_fifo_put (f, data);
}
 12a:	08 95       	ret

0000012c <StartTimer0Interrupt>:
void StartTimer0Interrupt(void)
/*
The timer 0 is initialized to generate an interrupt every 15 ms.
*/
{
  OCR0 = 234;			// 15 ms period
 12c:	8a ee       	ldi	r24, 0xEA	; 234
 12e:	8c bf       	out	0x3c, r24	; 60
  TCNT0 = 0;			// counter reset
 130:	12 be       	out	0x32, r1	; 50
  TCCR0 = 0B00001101;	// start timer with prescaler of 1024 in clear timer on compare match mode (CTC)
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	83 bf       	out	0x33, r24	; 51
  TIMSK |= (1<<OCIE0);	// timer 0 output compare match interrupt enable
 136:	89 b7       	in	r24, 0x39	; 57
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	89 bf       	out	0x39, r24	; 57
 13c:	08 95       	ret

0000013e <InitialiseHardware>:
volatile uint16_t intnum=0;
volatile uint8_t *bufcounter;

void InitialiseHardware(void)
{
	sei();							// enables interrupts by setting the global interrupt mask
 13e:	78 94       	sei
	AdcInit();						// initializes the a/d converter
 140:	0e 94 49 00 	call	0x92	; 0x92 <AdcInit>
	bufcounter = uart_init(19200);	// initializes the UART for the given baudrate
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	7b e4       	ldi	r23, 0x4B	; 75
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 76 01 	call	0x2ec	; 0x2ec <uart_init>
 150:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <bufcounter+0x1>
 154:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <bufcounter>
	PortInit();						// initializes the port settings
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <PortInit>
	StartTimer0Interrupt();			// timer 0 interrupt for 15 ms
 15c:	0e 94 96 00 	call	0x12c	; 0x12c <StartTimer0Interrupt>
 160:	08 95       	ret

00000162 <main>:
After initializing the interfaces and "Hello World" is send to the serial port.
In a period of a second port pin D7 is toggled and sample data are send to the 
serial port. These sample data contain an index, analog data input, digital port 
inputs and an interrupt counter.
*/
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	c1 54       	subi	r28, 0x41	; 65
 16c:	d1 09       	sbc	r29, r1
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	uint16_t difference;
	uint16_t boilingTemp;
	
	
	
	InitialiseHardware(); 
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <InitialiseHardware>
	sprintf( Text,"\r\nPut sensor in ice water and press button\r\n");
 17c:	8d e2       	ldi	r24, 0x2D	; 45
 17e:	e0 e6       	ldi	r30, 0x60	; 96
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	de 01       	movw	r26, r28
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x24>
	uart_puts (Text); _delay_ms(1000);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 ba 01 	call	0x374	; 0x374 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	83 ed       	ldi	r24, 0xD3	; 211
 19a:	90 e3       	ldi	r25, 0x30	; 48
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x3a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x44>
 1a6:	00 00       	nop
	while(ReadPortD(3));
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 63 00 	call	0xc6	; 0xc6 <ReadPortD>
 1ae:	81 11       	cpse	r24, r1
 1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <main+0x46>
	
	iceTemp = ReadChannel(6);
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>
 1b8:	8c 01       	movw	r16, r24
	//sprintf( Text,"\r\n Value is %d\r\n", iceTemp);
	//uart_puts (Text); _delay_ms(1000);
		
	
	
	sprintf( Text,"\r\nPut sensor in boiling water and press button\r\n");
 1ba:	81 e3       	ldi	r24, 0x31	; 49
 1bc:	ed e8       	ldi	r30, 0x8D	; 141
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	de 01       	movw	r26, r28
 1c2:	11 96       	adiw	r26, 0x01	; 1
 1c4:	01 90       	ld	r0, Z+
 1c6:	0d 92       	st	X+, r0
 1c8:	8a 95       	dec	r24
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x62>
	uart_puts (Text); _delay_ms(1000);
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	0e 94 ba 01 	call	0x374	; 0x374 <uart_puts>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	83 ed       	ldi	r24, 0xD3	; 211
 1d8:	90 e3       	ldi	r25, 0x30	; 48
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x78>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x82>
 1e4:	00 00       	nop
	
	while(ReadPortD(4));
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	0e 94 63 00 	call	0xc6	; 0xc6 <ReadPortD>
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <main+0x84>

	boilingTemp = ReadChannel(6);
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>
	//uart_puts (Text); _delay_ms(1000);
		
	
	
	difference = boilingTemp - iceTemp ;	
	a1 = 100000/difference;
 1f6:	80 1b       	sub	r24, r16
 1f8:	91 0b       	sbc	r25, r17
 1fa:	9c 01       	movw	r18, r24
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	60 ea       	ldi	r22, 0xA0	; 160
 202:	76 e8       	ldi	r23, 0x86	; 134
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 67 02 	call	0x4ce	; 0x4ce <__divmodsi4>
 20c:	22 2e       	mov	r2, r18
 20e:	33 2e       	mov	r3, r19
 210:	c4 2e       	mov	r12, r20
 212:	22 96       	adiw	r28, 0x02	; 2
 214:	5f af       	std	Y+63, r21	; 0x3f
 216:	22 97       	sbiw	r28, 0x02	; 2
	a0 = -a1*iceTemp;
 218:	50 95       	com	r21
 21a:	40 95       	com	r20
 21c:	30 95       	com	r19
 21e:	21 95       	neg	r18
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	4f 4f       	sbci	r20, 0xFF	; 255
 224:	5f 4f       	sbci	r21, 0xFF	; 255
 226:	d8 01       	movw	r26, r16
 228:	0e 94 86 02 	call	0x50c	; 0x50c <__muluhisi3>
 22c:	2b 01       	movw	r4, r22
 22e:	3c 01       	movw	r6, r24
	//uart_puts (Text); _delay_ms(1000);
	
	Temperature = a1*ReadChannel(6)+a0;

	
	sprintf( Text,"\r\nTemperature = %04ld degC, \r\n",Temperature/100);
 230:	0f 2e       	mov	r0, r31
 232:	f4 e6       	ldi	r31, 0x64	; 100
 234:	8f 2e       	mov	r8, r31
 236:	91 2c       	mov	r9, r1
 238:	a1 2c       	mov	r10, r1
 23a:	b1 2c       	mov	r11, r1
 23c:	f0 2d       	mov	r31, r0
 23e:	0f 2e       	mov	r0, r31
 240:	fe eb       	ldi	r31, 0xBE	; 190
 242:	ef 2e       	mov	r14, r31
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0
 24a:	8e 01       	movw	r16, r28
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	Text[20] = Text[19];
	Text[19] = '.';
 250:	0f 2e       	mov	r0, r31
 252:	fe e2       	ldi	r31, 0x2E	; 46
 254:	df 2e       	mov	r13, r31
 256:	f0 2d       	mov	r31, r0
		
	//sprintf( Text,"\r\na1: %ld, a0:%ld  \r\n",a1,a0);
	
	//uart_puts (Text); _delay_ms(1000);
	
	Temperature = a1*ReadChannel(6)+a0;
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>

	
	sprintf( Text,"\r\nTemperature = %04ld degC, \r\n",Temperature/100);
 25e:	dc 01       	movw	r26, r24
 260:	22 2d       	mov	r18, r2
 262:	33 2d       	mov	r19, r3
 264:	4c 2d       	mov	r20, r12
 266:	22 96       	adiw	r28, 0x02	; 2
 268:	5f ad       	ldd	r21, Y+63	; 0x3f
 26a:	22 97       	sbiw	r28, 0x02	; 2
 26c:	0e 94 86 02 	call	0x50c	; 0x50c <__muluhisi3>
 270:	64 0d       	add	r22, r4
 272:	75 1d       	adc	r23, r5
 274:	86 1d       	adc	r24, r6
 276:	97 1d       	adc	r25, r7
 278:	a5 01       	movw	r20, r10
 27a:	94 01       	movw	r18, r8
 27c:	0e 94 67 02 	call	0x4ce	; 0x4ce <__divmodsi4>
 280:	5f 93       	push	r21
 282:	4f 93       	push	r20
 284:	3f 93       	push	r19
 286:	2f 93       	push	r18
 288:	ff 92       	push	r15
 28a:	ef 92       	push	r14
 28c:	1f 93       	push	r17
 28e:	0f 93       	push	r16
 290:	0e 94 a0 02 	call	0x540	; 0x540 <sprintf>
	
	Text[20] = Text[19];
 294:	8c 89       	ldd	r24, Y+20	; 0x14
 296:	8d 8b       	std	Y+21, r24	; 0x15
	Text[19] = '.';
 298:	dc 8a       	std	Y+20, r13	; 0x14
	
	uart_puts (Text); _delay_ms(1000);
 29a:	c8 01       	movw	r24, r16
 29c:	0e 94 ba 01 	call	0x374	; 0x374 <uart_puts>
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	83 ed       	ldi	r24, 0xD3	; 211
 2a4:	90 e3       	ldi	r25, 0x30	; 48
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x144>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x14e>
 2b0:	00 00       	nop
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	cd cf       	rjmp	.-102    	; 0x258 <main+0xf6>

000002be <__vector_10>:

ISR(TIMER0_COMP_vect)
/*
Interrupt service routine for timer 0 interrupt.
*/
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
	intnum++;
 2cc:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
 2d0:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <__data_end+0x1>
 2da:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__data_end>
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <uart_init>:
Receives single character. This routine waits if 
no character is available. 
*/
{
   return fifo_get_wait(&infifo);
}
 2ec:	cf 93       	push	r28
 2ee:	cf b7       	in	r28, 0x3f	; 63
 2f0:	dc 01       	movw	r26, r24
 2f2:	cb 01       	movw	r24, r22
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	9c 01       	movw	r18, r24
 306:	ad 01       	movw	r20, r26
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	44 1f       	adc	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	44 1f       	adc	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	74 e2       	ldi	r23, 0x24	; 36
 31c:	84 ef       	ldi	r24, 0xF4	; 244
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 45 02 	call	0x48a	; 0x48a <__udivmodsi4>
 324:	21 50       	subi	r18, 0x01	; 1
 326:	31 09       	sbc	r19, r1
 328:	29 b9       	out	0x09, r18	; 9
 32a:	f8 94       	cli
 32c:	88 e9       	ldi	r24, 0x98	; 152
 32e:	8a b9       	out	0x0a, r24	; 10
 330:	86 e8       	ldi	r24, 0x86	; 134
 332:	80 bd       	out	0x20, r24	; 32
 334:	8c b1       	in	r24, 0x0c	; 12
 336:	5f 99       	sbic	0x0b, 7	; 11
 338:	fd cf       	rjmp	.-6      	; 0x334 <uart_init+0x48>
 33a:	80 ec       	ldi	r24, 0xC0	; 192
 33c:	8b b9       	out	0x0b, r24	; 11
 33e:	cf bf       	out	0x3f, r28	; 63
 340:	40 e4       	ldi	r20, 0x40	; 64
 342:	62 ee       	ldi	r22, 0xE2	; 226
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	8a e2       	ldi	r24, 0x2A	; 42
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 6e 00 	call	0xdc	; 0xdc <fifo_init>
 34e:	40 e4       	ldi	r20, 0x40	; 64
 350:	62 e3       	ldi	r22, 0x32	; 50
 352:	71 e0       	ldi	r23, 0x01	; 1
 354:	82 e2       	ldi	r24, 0x22	; 34
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 6e 00 	call	0xdc	; 0xdc <fifo_init>
 35c:	82 e2       	ldi	r24, 0x22	; 34
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <uart_putc>:
 364:	68 2f       	mov	r22, r24
 366:	82 e2       	ldi	r24, 0x22	; 34
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 78 00 	call	0xf0	; 0xf0 <fifo_put>
 36e:	55 9a       	sbi	0x0a, 5	; 10
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret

00000374 <uart_puts>:
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
 37e:	8e 01       	movw	r16, r28
 380:	88 81       	ld	r24, Y
 382:	88 23       	and	r24, r24
 384:	39 f0       	breq	.+14     	; 0x394 <uart_puts+0x20>
 386:	0e 94 b2 01 	call	0x364	; 0x364 <uart_putc>
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	f8 01       	movw	r30, r16
 38e:	80 81       	ld	r24, Z
 390:	81 11       	cpse	r24, r1
 392:	f5 cf       	rjmp	.-22     	; 0x37e <uart_puts+0xa>
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <__vector_13>:

SIGNAL(USART_RXC_vect)	// received characters will be stored in input FIFO
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
   _inline_fifo_put(&infifo, UDR);
 3ba:	4c b1       	in	r20, 0x0c	; 12
_inline_fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
 3bc:	ea e2       	ldi	r30, 0x2A	; 42
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	90 81       	ld	r25, Z
 3c2:	81 81       	ldd	r24, Z+1	; 0x01
 3c4:	98 17       	cp	r25, r24
 3c6:	c0 f4       	brcc	.+48     	; 0x3f8 <__vector_13+0x5a>
		return 0;
		
	uint8_t * pwrite = f->pwrite;
 3c8:	a4 81       	ldd	r26, Z+4	; 0x04
 3ca:	b5 81       	ldd	r27, Z+5	; 0x05
	
	*(pwrite++) = data;
 3cc:	9d 01       	movw	r18, r26
 3ce:	2f 5f       	subi	r18, 0xFF	; 255
 3d0:	3f 4f       	sbci	r19, 0xFF	; 255
 3d2:	4c 93       	st	X, r20
	
	uint8_t write2end = f->write2end;
 3d4:	87 81       	ldd	r24, Z+7	; 0x07
	
	if (--write2end == 0)
 3d6:	81 50       	subi	r24, 0x01	; 1
 3d8:	21 f4       	brne	.+8      	; 0x3e2 <__vector_13+0x44>
	{
		write2end = f->size;
 3da:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <infifo+0x1>
		pwrite -= write2end;
 3de:	28 1b       	sub	r18, r24
 3e0:	31 09       	sbc	r19, r1
	}
	
	f->write2end = write2end;
 3e2:	ea e2       	ldi	r30, 0x2A	; 42
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 3e8:	35 83       	std	Z+5, r19	; 0x05
 3ea:	24 83       	std	Z+4, r18	; 0x04

	uint8_t sreg = SREG;
 3ec:	9f b7       	in	r25, 0x3f	; 63
	cli();
 3ee:	f8 94       	cli
	f->count++;
 3f0:	80 81       	ld	r24, Z
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 83       	st	Z, r24
	SREG = sreg;
 3f6:	9f bf       	out	0x3f, r25	; 63
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_14>:

SIGNAL(USART_UDRE_vect)	// characters from the output FIFO will be send
{						// until buffer is empty. 
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
   if (outfifo.count > 0)
 42e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <outfifo>
 432:	88 23       	and	r24, r24
 434:	e1 f0       	breq	.+56     	; 0x46e <__vector_14+0x5a>
_inline_fifo_get (fifo_t *f)
/*
Gets single character from FIFO.
*/
{
	uint8_t *pread = f->pread;
 436:	e2 e2       	ldi	r30, 0x22	; 34
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	a2 81       	ldd	r26, Z+2	; 0x02
 43c:	b3 81       	ldd	r27, Z+3	; 0x03
	uint8_t data = *(pread++);
 43e:	9d 01       	movw	r18, r26
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	9c 91       	ld	r25, X
	uint8_t read2end = f->read2end;
 446:	86 81       	ldd	r24, Z+6	; 0x06
	
	if (--read2end == 0)
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	21 f4       	brne	.+8      	; 0x454 <__vector_14+0x40>
	{
		read2end = f->size;
 44c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <outfifo+0x1>
		pread -= read2end;
 450:	28 1b       	sub	r18, r24
 452:	31 09       	sbc	r19, r1
	}
	
	f->pread = pread;
 454:	e2 e2       	ldi	r30, 0x22	; 34
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	33 83       	std	Z+3, r19	; 0x03
 45a:	22 83       	std	Z+2, r18	; 0x02
	f->read2end = read2end;
 45c:	86 83       	std	Z+6, r24	; 0x06
	
	uint8_t sreg = SREG;
 45e:	2f b7       	in	r18, 0x3f	; 63
	cli();
 460:	f8 94       	cli
	f->count--;
 462:	80 81       	ld	r24, Z
 464:	81 50       	subi	r24, 0x01	; 1
 466:	80 83       	st	Z, r24
	SREG = sreg;
 468:	2f bf       	out	0x3f, r18	; 63
      UDR = _inline_fifo_get(&outfifo);
 46a:	9c b9       	out	0x0c, r25	; 12
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__vector_14+0x5c>
   else
      UCSRB &= ~(1<<UDRIE); // disable interrupt
 46e:	55 98       	cbi	0x0a, 5	; 10
} 
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <__udivmodsi4>:
 48a:	a1 e2       	ldi	r26, 0x21	; 33
 48c:	1a 2e       	mov	r1, r26
 48e:	aa 1b       	sub	r26, r26
 490:	bb 1b       	sub	r27, r27
 492:	fd 01       	movw	r30, r26
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <__udivmodsi4_ep>

00000496 <__udivmodsi4_loop>:
 496:	aa 1f       	adc	r26, r26
 498:	bb 1f       	adc	r27, r27
 49a:	ee 1f       	adc	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	a2 17       	cp	r26, r18
 4a0:	b3 07       	cpc	r27, r19
 4a2:	e4 07       	cpc	r30, r20
 4a4:	f5 07       	cpc	r31, r21
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__udivmodsi4_ep>
 4a8:	a2 1b       	sub	r26, r18
 4aa:	b3 0b       	sbc	r27, r19
 4ac:	e4 0b       	sbc	r30, r20
 4ae:	f5 0b       	sbc	r31, r21

000004b0 <__udivmodsi4_ep>:
 4b0:	66 1f       	adc	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	1a 94       	dec	r1
 4ba:	69 f7       	brne	.-38     	; 0x496 <__udivmodsi4_loop>
 4bc:	60 95       	com	r22
 4be:	70 95       	com	r23
 4c0:	80 95       	com	r24
 4c2:	90 95       	com	r25
 4c4:	9b 01       	movw	r18, r22
 4c6:	ac 01       	movw	r20, r24
 4c8:	bd 01       	movw	r22, r26
 4ca:	cf 01       	movw	r24, r30
 4cc:	08 95       	ret

000004ce <__divmodsi4>:
 4ce:	05 2e       	mov	r0, r21
 4d0:	97 fb       	bst	r25, 7
 4d2:	1e f4       	brtc	.+6      	; 0x4da <__divmodsi4+0xc>
 4d4:	00 94       	com	r0
 4d6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__negsi2>
 4da:	57 fd       	sbrc	r21, 7
 4dc:	07 d0       	rcall	.+14     	; 0x4ec <__divmodsi4_neg2>
 4de:	0e 94 45 02 	call	0x48a	; 0x48a <__udivmodsi4>
 4e2:	07 fc       	sbrc	r0, 7
 4e4:	03 d0       	rcall	.+6      	; 0x4ec <__divmodsi4_neg2>
 4e6:	4e f4       	brtc	.+18     	; 0x4fa <__divmodsi4_exit>
 4e8:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__negsi2>

000004ec <__divmodsi4_neg2>:
 4ec:	50 95       	com	r21
 4ee:	40 95       	com	r20
 4f0:	30 95       	com	r19
 4f2:	21 95       	neg	r18
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	4f 4f       	sbci	r20, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255

000004fa <__divmodsi4_exit>:
 4fa:	08 95       	ret

000004fc <__negsi2>:
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	08 95       	ret

0000050c <__muluhisi3>:
 50c:	0e 94 91 02 	call	0x522	; 0x522 <__umulhisi3>
 510:	a5 9f       	mul	r26, r21
 512:	90 0d       	add	r25, r0
 514:	b4 9f       	mul	r27, r20
 516:	90 0d       	add	r25, r0
 518:	a4 9f       	mul	r26, r20
 51a:	80 0d       	add	r24, r0
 51c:	91 1d       	adc	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	08 95       	ret

00000522 <__umulhisi3>:
 522:	a2 9f       	mul	r26, r18
 524:	b0 01       	movw	r22, r0
 526:	b3 9f       	mul	r27, r19
 528:	c0 01       	movw	r24, r0
 52a:	a3 9f       	mul	r26, r19
 52c:	70 0d       	add	r23, r0
 52e:	81 1d       	adc	r24, r1
 530:	11 24       	eor	r1, r1
 532:	91 1d       	adc	r25, r1
 534:	b2 9f       	mul	r27, r18
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	08 95       	ret

00000540 <sprintf>:
 540:	ae e0       	ldi	r26, 0x0E	; 14
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e6 ea       	ldi	r30, 0xA6	; 166
 546:	f2 e0       	ldi	r31, 0x02	; 2
 548:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__prologue_saves__+0x1c>
 54c:	0d 89       	ldd	r16, Y+21	; 0x15
 54e:	1e 89       	ldd	r17, Y+22	; 0x16
 550:	86 e0       	ldi	r24, 0x06	; 6
 552:	8c 83       	std	Y+4, r24	; 0x04
 554:	1a 83       	std	Y+2, r17	; 0x02
 556:	09 83       	std	Y+1, r16	; 0x01
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	9f e7       	ldi	r25, 0x7F	; 127
 55c:	9e 83       	std	Y+6, r25	; 0x06
 55e:	8d 83       	std	Y+5, r24	; 0x05
 560:	ae 01       	movw	r20, r28
 562:	47 5e       	subi	r20, 0xE7	; 231
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	6f 89       	ldd	r22, Y+23	; 0x17
 568:	78 8d       	ldd	r23, Y+24	; 0x18
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	0e 94 c2 02 	call	0x584	; 0x584 <vfprintf>
 572:	ef 81       	ldd	r30, Y+7	; 0x07
 574:	f8 85       	ldd	r31, Y+8	; 0x08
 576:	e0 0f       	add	r30, r16
 578:	f1 1f       	adc	r31, r17
 57a:	10 82       	st	Z, r1
 57c:	2e 96       	adiw	r28, 0x0e	; 14
 57e:	e4 e0       	ldi	r30, 0x04	; 4
 580:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__epilogue_restores__+0x1c>

00000584 <vfprintf>:
 584:	ab e0       	ldi	r26, 0x0B	; 11
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	e8 ec       	ldi	r30, 0xC8	; 200
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__prologue_saves__>
 590:	6c 01       	movw	r12, r24
 592:	7b 01       	movw	r14, r22
 594:	8a 01       	movw	r16, r20
 596:	fc 01       	movw	r30, r24
 598:	17 82       	std	Z+7, r1	; 0x07
 59a:	16 82       	std	Z+6, r1	; 0x06
 59c:	83 81       	ldd	r24, Z+3	; 0x03
 59e:	81 ff       	sbrs	r24, 1
 5a0:	cc c1       	rjmp	.+920    	; 0x93a <__stack+0xdb>
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	3c 01       	movw	r6, r24
 5a8:	f6 01       	movw	r30, r12
 5aa:	93 81       	ldd	r25, Z+3	; 0x03
 5ac:	f7 01       	movw	r30, r14
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	88 23       	and	r24, r24
 5ba:	09 f4       	brne	.+2      	; 0x5be <vfprintf+0x3a>
 5bc:	ba c1       	rjmp	.+884    	; 0x932 <__stack+0xd3>
 5be:	85 32       	cpi	r24, 0x25	; 37
 5c0:	39 f4       	brne	.+14     	; 0x5d0 <vfprintf+0x4c>
 5c2:	93 fd       	sbrc	r25, 3
 5c4:	85 91       	lpm	r24, Z+
 5c6:	93 ff       	sbrs	r25, 3
 5c8:	81 91       	ld	r24, Z+
 5ca:	7f 01       	movw	r14, r30
 5cc:	85 32       	cpi	r24, 0x25	; 37
 5ce:	29 f4       	brne	.+10     	; 0x5da <vfprintf+0x56>
 5d0:	b6 01       	movw	r22, r12
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 5d8:	e7 cf       	rjmp	.-50     	; 0x5a8 <vfprintf+0x24>
 5da:	91 2c       	mov	r9, r1
 5dc:	21 2c       	mov	r2, r1
 5de:	31 2c       	mov	r3, r1
 5e0:	ff e1       	ldi	r31, 0x1F	; 31
 5e2:	f3 15       	cp	r31, r3
 5e4:	d8 f0       	brcs	.+54     	; 0x61c <vfprintf+0x98>
 5e6:	8b 32       	cpi	r24, 0x2B	; 43
 5e8:	79 f0       	breq	.+30     	; 0x608 <vfprintf+0x84>
 5ea:	38 f4       	brcc	.+14     	; 0x5fa <vfprintf+0x76>
 5ec:	80 32       	cpi	r24, 0x20	; 32
 5ee:	79 f0       	breq	.+30     	; 0x60e <vfprintf+0x8a>
 5f0:	83 32       	cpi	r24, 0x23	; 35
 5f2:	a1 f4       	brne	.+40     	; 0x61c <vfprintf+0x98>
 5f4:	23 2d       	mov	r18, r3
 5f6:	20 61       	ori	r18, 0x10	; 16
 5f8:	1d c0       	rjmp	.+58     	; 0x634 <vfprintf+0xb0>
 5fa:	8d 32       	cpi	r24, 0x2D	; 45
 5fc:	61 f0       	breq	.+24     	; 0x616 <vfprintf+0x92>
 5fe:	80 33       	cpi	r24, 0x30	; 48
 600:	69 f4       	brne	.+26     	; 0x61c <vfprintf+0x98>
 602:	23 2d       	mov	r18, r3
 604:	21 60       	ori	r18, 0x01	; 1
 606:	16 c0       	rjmp	.+44     	; 0x634 <vfprintf+0xb0>
 608:	83 2d       	mov	r24, r3
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	38 2e       	mov	r3, r24
 60e:	e3 2d       	mov	r30, r3
 610:	e4 60       	ori	r30, 0x04	; 4
 612:	3e 2e       	mov	r3, r30
 614:	2a c0       	rjmp	.+84     	; 0x66a <vfprintf+0xe6>
 616:	f3 2d       	mov	r31, r3
 618:	f8 60       	ori	r31, 0x08	; 8
 61a:	1d c0       	rjmp	.+58     	; 0x656 <vfprintf+0xd2>
 61c:	37 fc       	sbrc	r3, 7
 61e:	2d c0       	rjmp	.+90     	; 0x67a <vfprintf+0xf6>
 620:	20 ed       	ldi	r18, 0xD0	; 208
 622:	28 0f       	add	r18, r24
 624:	2a 30       	cpi	r18, 0x0A	; 10
 626:	40 f0       	brcs	.+16     	; 0x638 <vfprintf+0xb4>
 628:	8e 32       	cpi	r24, 0x2E	; 46
 62a:	b9 f4       	brne	.+46     	; 0x65a <vfprintf+0xd6>
 62c:	36 fc       	sbrc	r3, 6
 62e:	81 c1       	rjmp	.+770    	; 0x932 <__stack+0xd3>
 630:	23 2d       	mov	r18, r3
 632:	20 64       	ori	r18, 0x40	; 64
 634:	32 2e       	mov	r3, r18
 636:	19 c0       	rjmp	.+50     	; 0x66a <vfprintf+0xe6>
 638:	36 fe       	sbrs	r3, 6
 63a:	06 c0       	rjmp	.+12     	; 0x648 <vfprintf+0xc4>
 63c:	8a e0       	ldi	r24, 0x0A	; 10
 63e:	98 9e       	mul	r9, r24
 640:	20 0d       	add	r18, r0
 642:	11 24       	eor	r1, r1
 644:	92 2e       	mov	r9, r18
 646:	11 c0       	rjmp	.+34     	; 0x66a <vfprintf+0xe6>
 648:	ea e0       	ldi	r30, 0x0A	; 10
 64a:	2e 9e       	mul	r2, r30
 64c:	20 0d       	add	r18, r0
 64e:	11 24       	eor	r1, r1
 650:	22 2e       	mov	r2, r18
 652:	f3 2d       	mov	r31, r3
 654:	f0 62       	ori	r31, 0x20	; 32
 656:	3f 2e       	mov	r3, r31
 658:	08 c0       	rjmp	.+16     	; 0x66a <vfprintf+0xe6>
 65a:	8c 36       	cpi	r24, 0x6C	; 108
 65c:	21 f4       	brne	.+8      	; 0x666 <vfprintf+0xe2>
 65e:	83 2d       	mov	r24, r3
 660:	80 68       	ori	r24, 0x80	; 128
 662:	38 2e       	mov	r3, r24
 664:	02 c0       	rjmp	.+4      	; 0x66a <vfprintf+0xe6>
 666:	88 36       	cpi	r24, 0x68	; 104
 668:	41 f4       	brne	.+16     	; 0x67a <vfprintf+0xf6>
 66a:	f7 01       	movw	r30, r14
 66c:	93 fd       	sbrc	r25, 3
 66e:	85 91       	lpm	r24, Z+
 670:	93 ff       	sbrs	r25, 3
 672:	81 91       	ld	r24, Z+
 674:	7f 01       	movw	r14, r30
 676:	81 11       	cpse	r24, r1
 678:	b3 cf       	rjmp	.-154    	; 0x5e0 <vfprintf+0x5c>
 67a:	98 2f       	mov	r25, r24
 67c:	9f 7d       	andi	r25, 0xDF	; 223
 67e:	95 54       	subi	r25, 0x45	; 69
 680:	93 30       	cpi	r25, 0x03	; 3
 682:	28 f4       	brcc	.+10     	; 0x68e <vfprintf+0x10a>
 684:	0c 5f       	subi	r16, 0xFC	; 252
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	9f e3       	ldi	r25, 0x3F	; 63
 68a:	99 83       	std	Y+1, r25	; 0x01
 68c:	0d c0       	rjmp	.+26     	; 0x6a8 <vfprintf+0x124>
 68e:	83 36       	cpi	r24, 0x63	; 99
 690:	31 f0       	breq	.+12     	; 0x69e <vfprintf+0x11a>
 692:	83 37       	cpi	r24, 0x73	; 115
 694:	71 f0       	breq	.+28     	; 0x6b2 <vfprintf+0x12e>
 696:	83 35       	cpi	r24, 0x53	; 83
 698:	09 f0       	breq	.+2      	; 0x69c <vfprintf+0x118>
 69a:	59 c0       	rjmp	.+178    	; 0x74e <vfprintf+0x1ca>
 69c:	21 c0       	rjmp	.+66     	; 0x6e0 <vfprintf+0x15c>
 69e:	f8 01       	movw	r30, r16
 6a0:	80 81       	ld	r24, Z
 6a2:	89 83       	std	Y+1, r24	; 0x01
 6a4:	0e 5f       	subi	r16, 0xFE	; 254
 6a6:	1f 4f       	sbci	r17, 0xFF	; 255
 6a8:	88 24       	eor	r8, r8
 6aa:	83 94       	inc	r8
 6ac:	91 2c       	mov	r9, r1
 6ae:	53 01       	movw	r10, r6
 6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <vfprintf+0x154>
 6b2:	28 01       	movw	r4, r16
 6b4:	f2 e0       	ldi	r31, 0x02	; 2
 6b6:	4f 0e       	add	r4, r31
 6b8:	51 1c       	adc	r5, r1
 6ba:	f8 01       	movw	r30, r16
 6bc:	a0 80       	ld	r10, Z
 6be:	b1 80       	ldd	r11, Z+1	; 0x01
 6c0:	36 fe       	sbrs	r3, 6
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x146>
 6c4:	69 2d       	mov	r22, r9
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0x14a>
 6ca:	6f ef       	ldi	r22, 0xFF	; 255
 6cc:	7f ef       	ldi	r23, 0xFF	; 255
 6ce:	c5 01       	movw	r24, r10
 6d0:	0e 94 ae 04 	call	0x95c	; 0x95c <strnlen>
 6d4:	4c 01       	movw	r8, r24
 6d6:	82 01       	movw	r16, r4
 6d8:	f3 2d       	mov	r31, r3
 6da:	ff 77       	andi	r31, 0x7F	; 127
 6dc:	3f 2e       	mov	r3, r31
 6de:	16 c0       	rjmp	.+44     	; 0x70c <vfprintf+0x188>
 6e0:	28 01       	movw	r4, r16
 6e2:	22 e0       	ldi	r18, 0x02	; 2
 6e4:	42 0e       	add	r4, r18
 6e6:	51 1c       	adc	r5, r1
 6e8:	f8 01       	movw	r30, r16
 6ea:	a0 80       	ld	r10, Z
 6ec:	b1 80       	ldd	r11, Z+1	; 0x01
 6ee:	36 fe       	sbrs	r3, 6
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <vfprintf+0x174>
 6f2:	69 2d       	mov	r22, r9
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x178>
 6f8:	6f ef       	ldi	r22, 0xFF	; 255
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	c5 01       	movw	r24, r10
 6fe:	0e 94 a3 04 	call	0x946	; 0x946 <strnlen_P>
 702:	4c 01       	movw	r8, r24
 704:	f3 2d       	mov	r31, r3
 706:	f0 68       	ori	r31, 0x80	; 128
 708:	3f 2e       	mov	r3, r31
 70a:	82 01       	movw	r16, r4
 70c:	33 fc       	sbrc	r3, 3
 70e:	1b c0       	rjmp	.+54     	; 0x746 <vfprintf+0x1c2>
 710:	82 2d       	mov	r24, r2
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	88 16       	cp	r8, r24
 716:	99 06       	cpc	r9, r25
 718:	b0 f4       	brcc	.+44     	; 0x746 <vfprintf+0x1c2>
 71a:	b6 01       	movw	r22, r12
 71c:	80 e2       	ldi	r24, 0x20	; 32
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 724:	2a 94       	dec	r2
 726:	f4 cf       	rjmp	.-24     	; 0x710 <vfprintf+0x18c>
 728:	f5 01       	movw	r30, r10
 72a:	37 fc       	sbrc	r3, 7
 72c:	85 91       	lpm	r24, Z+
 72e:	37 fe       	sbrs	r3, 7
 730:	81 91       	ld	r24, Z+
 732:	5f 01       	movw	r10, r30
 734:	b6 01       	movw	r22, r12
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 73c:	21 10       	cpse	r2, r1
 73e:	2a 94       	dec	r2
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	82 1a       	sub	r8, r18
 744:	91 08       	sbc	r9, r1
 746:	81 14       	cp	r8, r1
 748:	91 04       	cpc	r9, r1
 74a:	71 f7       	brne	.-36     	; 0x728 <vfprintf+0x1a4>
 74c:	e8 c0       	rjmp	.+464    	; 0x91e <__stack+0xbf>
 74e:	84 36       	cpi	r24, 0x64	; 100
 750:	11 f0       	breq	.+4      	; 0x756 <vfprintf+0x1d2>
 752:	89 36       	cpi	r24, 0x69	; 105
 754:	41 f5       	brne	.+80     	; 0x7a6 <vfprintf+0x222>
 756:	f8 01       	movw	r30, r16
 758:	37 fe       	sbrs	r3, 7
 75a:	07 c0       	rjmp	.+14     	; 0x76a <vfprintf+0x1e6>
 75c:	60 81       	ld	r22, Z
 75e:	71 81       	ldd	r23, Z+1	; 0x01
 760:	82 81       	ldd	r24, Z+2	; 0x02
 762:	93 81       	ldd	r25, Z+3	; 0x03
 764:	0c 5f       	subi	r16, 0xFC	; 252
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	08 c0       	rjmp	.+16     	; 0x77a <vfprintf+0x1f6>
 76a:	60 81       	ld	r22, Z
 76c:	71 81       	ldd	r23, Z+1	; 0x01
 76e:	07 2e       	mov	r0, r23
 770:	00 0c       	add	r0, r0
 772:	88 0b       	sbc	r24, r24
 774:	99 0b       	sbc	r25, r25
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	f3 2d       	mov	r31, r3
 77c:	ff 76       	andi	r31, 0x6F	; 111
 77e:	3f 2e       	mov	r3, r31
 780:	97 ff       	sbrs	r25, 7
 782:	09 c0       	rjmp	.+18     	; 0x796 <vfprintf+0x212>
 784:	90 95       	com	r25
 786:	80 95       	com	r24
 788:	70 95       	com	r23
 78a:	61 95       	neg	r22
 78c:	7f 4f       	sbci	r23, 0xFF	; 255
 78e:	8f 4f       	sbci	r24, 0xFF	; 255
 790:	9f 4f       	sbci	r25, 0xFF	; 255
 792:	f0 68       	ori	r31, 0x80	; 128
 794:	3f 2e       	mov	r3, r31
 796:	2a e0       	ldi	r18, 0x0A	; 10
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	a3 01       	movw	r20, r6
 79c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__ultoa_invert>
 7a0:	88 2e       	mov	r8, r24
 7a2:	86 18       	sub	r8, r6
 7a4:	45 c0       	rjmp	.+138    	; 0x830 <vfprintf+0x2ac>
 7a6:	85 37       	cpi	r24, 0x75	; 117
 7a8:	31 f4       	brne	.+12     	; 0x7b6 <vfprintf+0x232>
 7aa:	23 2d       	mov	r18, r3
 7ac:	2f 7e       	andi	r18, 0xEF	; 239
 7ae:	b2 2e       	mov	r11, r18
 7b0:	2a e0       	ldi	r18, 0x0A	; 10
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	25 c0       	rjmp	.+74     	; 0x800 <vfprintf+0x27c>
 7b6:	93 2d       	mov	r25, r3
 7b8:	99 7f       	andi	r25, 0xF9	; 249
 7ba:	b9 2e       	mov	r11, r25
 7bc:	8f 36       	cpi	r24, 0x6F	; 111
 7be:	c1 f0       	breq	.+48     	; 0x7f0 <vfprintf+0x26c>
 7c0:	18 f4       	brcc	.+6      	; 0x7c8 <vfprintf+0x244>
 7c2:	88 35       	cpi	r24, 0x58	; 88
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <vfprintf+0x260>
 7c6:	b5 c0       	rjmp	.+362    	; 0x932 <__stack+0xd3>
 7c8:	80 37       	cpi	r24, 0x70	; 112
 7ca:	19 f0       	breq	.+6      	; 0x7d2 <vfprintf+0x24e>
 7cc:	88 37       	cpi	r24, 0x78	; 120
 7ce:	21 f0       	breq	.+8      	; 0x7d8 <vfprintf+0x254>
 7d0:	b0 c0       	rjmp	.+352    	; 0x932 <__stack+0xd3>
 7d2:	e9 2f       	mov	r30, r25
 7d4:	e0 61       	ori	r30, 0x10	; 16
 7d6:	be 2e       	mov	r11, r30
 7d8:	b4 fe       	sbrs	r11, 4
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <vfprintf+0x272>
 7dc:	fb 2d       	mov	r31, r11
 7de:	f4 60       	ori	r31, 0x04	; 4
 7e0:	bf 2e       	mov	r11, r31
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <vfprintf+0x272>
 7e4:	34 fe       	sbrs	r3, 4
 7e6:	0a c0       	rjmp	.+20     	; 0x7fc <vfprintf+0x278>
 7e8:	29 2f       	mov	r18, r25
 7ea:	26 60       	ori	r18, 0x06	; 6
 7ec:	b2 2e       	mov	r11, r18
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0x278>
 7f0:	28 e0       	ldi	r18, 0x08	; 8
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <vfprintf+0x27c>
 7f6:	20 e1       	ldi	r18, 0x10	; 16
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <vfprintf+0x27c>
 7fc:	20 e1       	ldi	r18, 0x10	; 16
 7fe:	32 e0       	ldi	r19, 0x02	; 2
 800:	f8 01       	movw	r30, r16
 802:	b7 fe       	sbrs	r11, 7
 804:	07 c0       	rjmp	.+14     	; 0x814 <vfprintf+0x290>
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	82 81       	ldd	r24, Z+2	; 0x02
 80c:	93 81       	ldd	r25, Z+3	; 0x03
 80e:	0c 5f       	subi	r16, 0xFC	; 252
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	06 c0       	rjmp	.+12     	; 0x820 <vfprintf+0x29c>
 814:	60 81       	ld	r22, Z
 816:	71 81       	ldd	r23, Z+1	; 0x01
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 5f       	subi	r16, 0xFE	; 254
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	a3 01       	movw	r20, r6
 822:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__ultoa_invert>
 826:	88 2e       	mov	r8, r24
 828:	86 18       	sub	r8, r6
 82a:	fb 2d       	mov	r31, r11
 82c:	ff 77       	andi	r31, 0x7F	; 127
 82e:	3f 2e       	mov	r3, r31
 830:	36 fe       	sbrs	r3, 6
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x2ca>
 834:	23 2d       	mov	r18, r3
 836:	2e 7f       	andi	r18, 0xFE	; 254
 838:	a2 2e       	mov	r10, r18
 83a:	89 14       	cp	r8, r9
 83c:	58 f4       	brcc	.+22     	; 0x854 <vfprintf+0x2d0>
 83e:	34 fe       	sbrs	r3, 4
 840:	0b c0       	rjmp	.+22     	; 0x858 <vfprintf+0x2d4>
 842:	32 fc       	sbrc	r3, 2
 844:	09 c0       	rjmp	.+18     	; 0x858 <vfprintf+0x2d4>
 846:	83 2d       	mov	r24, r3
 848:	8e 7e       	andi	r24, 0xEE	; 238
 84a:	a8 2e       	mov	r10, r24
 84c:	05 c0       	rjmp	.+10     	; 0x858 <vfprintf+0x2d4>
 84e:	b8 2c       	mov	r11, r8
 850:	a3 2c       	mov	r10, r3
 852:	03 c0       	rjmp	.+6      	; 0x85a <vfprintf+0x2d6>
 854:	b8 2c       	mov	r11, r8
 856:	01 c0       	rjmp	.+2      	; 0x85a <vfprintf+0x2d6>
 858:	b9 2c       	mov	r11, r9
 85a:	a4 fe       	sbrs	r10, 4
 85c:	0f c0       	rjmp	.+30     	; 0x87c <__stack+0x1d>
 85e:	fe 01       	movw	r30, r28
 860:	e8 0d       	add	r30, r8
 862:	f1 1d       	adc	r31, r1
 864:	80 81       	ld	r24, Z
 866:	80 33       	cpi	r24, 0x30	; 48
 868:	21 f4       	brne	.+8      	; 0x872 <__stack+0x13>
 86a:	9a 2d       	mov	r25, r10
 86c:	99 7e       	andi	r25, 0xE9	; 233
 86e:	a9 2e       	mov	r10, r25
 870:	09 c0       	rjmp	.+18     	; 0x884 <__stack+0x25>
 872:	a2 fe       	sbrs	r10, 2
 874:	06 c0       	rjmp	.+12     	; 0x882 <__stack+0x23>
 876:	b3 94       	inc	r11
 878:	b3 94       	inc	r11
 87a:	04 c0       	rjmp	.+8      	; 0x884 <__stack+0x25>
 87c:	8a 2d       	mov	r24, r10
 87e:	86 78       	andi	r24, 0x86	; 134
 880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
 882:	b3 94       	inc	r11
 884:	a3 fc       	sbrc	r10, 3
 886:	11 c0       	rjmp	.+34     	; 0x8aa <__stack+0x4b>
 888:	a0 fe       	sbrs	r10, 0
 88a:	06 c0       	rjmp	.+12     	; 0x898 <__stack+0x39>
 88c:	b2 14       	cp	r11, r2
 88e:	88 f4       	brcc	.+34     	; 0x8b2 <__stack+0x53>
 890:	28 0c       	add	r2, r8
 892:	92 2c       	mov	r9, r2
 894:	9b 18       	sub	r9, r11
 896:	0e c0       	rjmp	.+28     	; 0x8b4 <__stack+0x55>
 898:	b2 14       	cp	r11, r2
 89a:	60 f4       	brcc	.+24     	; 0x8b4 <__stack+0x55>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 8a6:	b3 94       	inc	r11
 8a8:	f7 cf       	rjmp	.-18     	; 0x898 <__stack+0x39>
 8aa:	b2 14       	cp	r11, r2
 8ac:	18 f4       	brcc	.+6      	; 0x8b4 <__stack+0x55>
 8ae:	2b 18       	sub	r2, r11
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	98 2c       	mov	r9, r8
 8b4:	21 2c       	mov	r2, r1
 8b6:	a4 fe       	sbrs	r10, 4
 8b8:	10 c0       	rjmp	.+32     	; 0x8da <__stack+0x7b>
 8ba:	b6 01       	movw	r22, r12
 8bc:	80 e3       	ldi	r24, 0x30	; 48
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 8c4:	a2 fe       	sbrs	r10, 2
 8c6:	17 c0       	rjmp	.+46     	; 0x8f6 <__stack+0x97>
 8c8:	a1 fc       	sbrc	r10, 1
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__stack+0x73>
 8cc:	88 e7       	ldi	r24, 0x78	; 120
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	88 e5       	ldi	r24, 0x58	; 88
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	b6 01       	movw	r22, r12
 8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <__stack+0x93>
 8da:	8a 2d       	mov	r24, r10
 8dc:	86 78       	andi	r24, 0x86	; 134
 8de:	59 f0       	breq	.+22     	; 0x8f6 <__stack+0x97>
 8e0:	a1 fe       	sbrs	r10, 1
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	8b e2       	ldi	r24, 0x2B	; 43
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <__stack+0x8b>
 8e8:	80 e2       	ldi	r24, 0x20	; 32
 8ea:	a7 fc       	sbrc	r10, 7
 8ec:	8d e2       	ldi	r24, 0x2D	; 45
 8ee:	b6 01       	movw	r22, r12
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 8f6:	89 14       	cp	r8, r9
 8f8:	38 f4       	brcc	.+14     	; 0x908 <__stack+0xa9>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 904:	9a 94       	dec	r9
 906:	f7 cf       	rjmp	.-18     	; 0x8f6 <__stack+0x97>
 908:	8a 94       	dec	r8
 90a:	f3 01       	movw	r30, r6
 90c:	e8 0d       	add	r30, r8
 90e:	f1 1d       	adc	r31, r1
 910:	80 81       	ld	r24, Z
 912:	b6 01       	movw	r22, r12
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 91a:	81 10       	cpse	r8, r1
 91c:	f5 cf       	rjmp	.-22     	; 0x908 <__stack+0xa9>
 91e:	22 20       	and	r2, r2
 920:	09 f4       	brne	.+2      	; 0x924 <__stack+0xc5>
 922:	42 ce       	rjmp	.-892    	; 0x5a8 <vfprintf+0x24>
 924:	b6 01       	movw	r22, r12
 926:	80 e2       	ldi	r24, 0x20	; 32
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 b9 04 	call	0x972	; 0x972 <fputc>
 92e:	2a 94       	dec	r2
 930:	f6 cf       	rjmp	.-20     	; 0x91e <__stack+0xbf>
 932:	f6 01       	movw	r30, r12
 934:	86 81       	ldd	r24, Z+6	; 0x06
 936:	97 81       	ldd	r25, Z+7	; 0x07
 938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0xdf>
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	9f ef       	ldi	r25, 0xFF	; 255
 93e:	2b 96       	adiw	r28, 0x0b	; 11
 940:	e2 e1       	ldi	r30, 0x12	; 18
 942:	0c 94 6f 05 	jmp	0xade	; 0xade <__epilogue_restores__>

00000946 <strnlen_P>:
 946:	fc 01       	movw	r30, r24
 948:	05 90       	lpm	r0, Z+
 94a:	61 50       	subi	r22, 0x01	; 1
 94c:	70 40       	sbci	r23, 0x00	; 0
 94e:	01 10       	cpse	r0, r1
 950:	d8 f7       	brcc	.-10     	; 0x948 <strnlen_P+0x2>
 952:	80 95       	com	r24
 954:	90 95       	com	r25
 956:	8e 0f       	add	r24, r30
 958:	9f 1f       	adc	r25, r31
 95a:	08 95       	ret

0000095c <strnlen>:
 95c:	fc 01       	movw	r30, r24
 95e:	61 50       	subi	r22, 0x01	; 1
 960:	70 40       	sbci	r23, 0x00	; 0
 962:	01 90       	ld	r0, Z+
 964:	01 10       	cpse	r0, r1
 966:	d8 f7       	brcc	.-10     	; 0x95e <strnlen+0x2>
 968:	80 95       	com	r24
 96a:	90 95       	com	r25
 96c:	8e 0f       	add	r24, r30
 96e:	9f 1f       	adc	r25, r31
 970:	08 95       	ret

00000972 <fputc>:
 972:	0f 93       	push	r16
 974:	1f 93       	push	r17
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	fb 01       	movw	r30, r22
 97c:	23 81       	ldd	r18, Z+3	; 0x03
 97e:	21 fd       	sbrc	r18, 1
 980:	03 c0       	rjmp	.+6      	; 0x988 <fputc+0x16>
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	2c c0       	rjmp	.+88     	; 0x9e0 <fputc+0x6e>
 988:	22 ff       	sbrs	r18, 2
 98a:	16 c0       	rjmp	.+44     	; 0x9b8 <fputc+0x46>
 98c:	46 81       	ldd	r20, Z+6	; 0x06
 98e:	57 81       	ldd	r21, Z+7	; 0x07
 990:	24 81       	ldd	r18, Z+4	; 0x04
 992:	35 81       	ldd	r19, Z+5	; 0x05
 994:	42 17       	cp	r20, r18
 996:	53 07       	cpc	r21, r19
 998:	44 f4       	brge	.+16     	; 0x9aa <fputc+0x38>
 99a:	a0 81       	ld	r26, Z
 99c:	b1 81       	ldd	r27, Z+1	; 0x01
 99e:	9d 01       	movw	r18, r26
 9a0:	2f 5f       	subi	r18, 0xFF	; 255
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	31 83       	std	Z+1, r19	; 0x01
 9a6:	20 83       	st	Z, r18
 9a8:	8c 93       	st	X, r24
 9aa:	26 81       	ldd	r18, Z+6	; 0x06
 9ac:	37 81       	ldd	r19, Z+7	; 0x07
 9ae:	2f 5f       	subi	r18, 0xFF	; 255
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	37 83       	std	Z+7, r19	; 0x07
 9b4:	26 83       	std	Z+6, r18	; 0x06
 9b6:	14 c0       	rjmp	.+40     	; 0x9e0 <fputc+0x6e>
 9b8:	8b 01       	movw	r16, r22
 9ba:	ec 01       	movw	r28, r24
 9bc:	fb 01       	movw	r30, r22
 9be:	00 84       	ldd	r0, Z+8	; 0x08
 9c0:	f1 85       	ldd	r31, Z+9	; 0x09
 9c2:	e0 2d       	mov	r30, r0
 9c4:	09 95       	icall
 9c6:	89 2b       	or	r24, r25
 9c8:	e1 f6       	brne	.-72     	; 0x982 <fputc+0x10>
 9ca:	d8 01       	movw	r26, r16
 9cc:	16 96       	adiw	r26, 0x06	; 6
 9ce:	8d 91       	ld	r24, X+
 9d0:	9c 91       	ld	r25, X
 9d2:	17 97       	sbiw	r26, 0x07	; 7
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	17 96       	adiw	r26, 0x07	; 7
 9d8:	9c 93       	st	X, r25
 9da:	8e 93       	st	-X, r24
 9dc:	16 97       	sbiw	r26, 0x06	; 6
 9de:	ce 01       	movw	r24, r28
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	1f 91       	pop	r17
 9e6:	0f 91       	pop	r16
 9e8:	08 95       	ret

000009ea <__ultoa_invert>:
 9ea:	fa 01       	movw	r30, r20
 9ec:	aa 27       	eor	r26, r26
 9ee:	28 30       	cpi	r18, 0x08	; 8
 9f0:	51 f1       	breq	.+84     	; 0xa46 <__ultoa_invert+0x5c>
 9f2:	20 31       	cpi	r18, 0x10	; 16
 9f4:	81 f1       	breq	.+96     	; 0xa56 <__ultoa_invert+0x6c>
 9f6:	e8 94       	clt
 9f8:	6f 93       	push	r22
 9fa:	6e 7f       	andi	r22, 0xFE	; 254
 9fc:	6e 5f       	subi	r22, 0xFE	; 254
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	af 4f       	sbci	r26, 0xFF	; 255
 a06:	b1 e0       	ldi	r27, 0x01	; 1
 a08:	3e d0       	rcall	.+124    	; 0xa86 <__ultoa_invert+0x9c>
 a0a:	b4 e0       	ldi	r27, 0x04	; 4
 a0c:	3c d0       	rcall	.+120    	; 0xa86 <__ultoa_invert+0x9c>
 a0e:	67 0f       	add	r22, r23
 a10:	78 1f       	adc	r23, r24
 a12:	89 1f       	adc	r24, r25
 a14:	9a 1f       	adc	r25, r26
 a16:	a1 1d       	adc	r26, r1
 a18:	68 0f       	add	r22, r24
 a1a:	79 1f       	adc	r23, r25
 a1c:	8a 1f       	adc	r24, r26
 a1e:	91 1d       	adc	r25, r1
 a20:	a1 1d       	adc	r26, r1
 a22:	6a 0f       	add	r22, r26
 a24:	71 1d       	adc	r23, r1
 a26:	81 1d       	adc	r24, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	a1 1d       	adc	r26, r1
 a2c:	20 d0       	rcall	.+64     	; 0xa6e <__ultoa_invert+0x84>
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__ultoa_invert+0x48>
 a30:	68 94       	set
 a32:	3f 91       	pop	r19
 a34:	2a e0       	ldi	r18, 0x0A	; 10
 a36:	26 9f       	mul	r18, r22
 a38:	11 24       	eor	r1, r1
 a3a:	30 19       	sub	r19, r0
 a3c:	30 5d       	subi	r19, 0xD0	; 208
 a3e:	31 93       	st	Z+, r19
 a40:	de f6       	brtc	.-74     	; 0x9f8 <__ultoa_invert+0xe>
 a42:	cf 01       	movw	r24, r30
 a44:	08 95       	ret
 a46:	46 2f       	mov	r20, r22
 a48:	47 70       	andi	r20, 0x07	; 7
 a4a:	40 5d       	subi	r20, 0xD0	; 208
 a4c:	41 93       	st	Z+, r20
 a4e:	b3 e0       	ldi	r27, 0x03	; 3
 a50:	0f d0       	rcall	.+30     	; 0xa70 <__ultoa_invert+0x86>
 a52:	c9 f7       	brne	.-14     	; 0xa46 <__ultoa_invert+0x5c>
 a54:	f6 cf       	rjmp	.-20     	; 0xa42 <__ultoa_invert+0x58>
 a56:	46 2f       	mov	r20, r22
 a58:	4f 70       	andi	r20, 0x0F	; 15
 a5a:	40 5d       	subi	r20, 0xD0	; 208
 a5c:	4a 33       	cpi	r20, 0x3A	; 58
 a5e:	18 f0       	brcs	.+6      	; 0xa66 <__ultoa_invert+0x7c>
 a60:	49 5d       	subi	r20, 0xD9	; 217
 a62:	31 fd       	sbrc	r19, 1
 a64:	40 52       	subi	r20, 0x20	; 32
 a66:	41 93       	st	Z+, r20
 a68:	02 d0       	rcall	.+4      	; 0xa6e <__ultoa_invert+0x84>
 a6a:	a9 f7       	brne	.-22     	; 0xa56 <__ultoa_invert+0x6c>
 a6c:	ea cf       	rjmp	.-44     	; 0xa42 <__ultoa_invert+0x58>
 a6e:	b4 e0       	ldi	r27, 0x04	; 4
 a70:	a6 95       	lsr	r26
 a72:	97 95       	ror	r25
 a74:	87 95       	ror	r24
 a76:	77 95       	ror	r23
 a78:	67 95       	ror	r22
 a7a:	ba 95       	dec	r27
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__ultoa_invert+0x86>
 a7e:	00 97       	sbiw	r24, 0x00	; 0
 a80:	61 05       	cpc	r22, r1
 a82:	71 05       	cpc	r23, r1
 a84:	08 95       	ret
 a86:	9b 01       	movw	r18, r22
 a88:	ac 01       	movw	r20, r24
 a8a:	0a 2e       	mov	r0, r26
 a8c:	06 94       	lsr	r0
 a8e:	57 95       	ror	r21
 a90:	47 95       	ror	r20
 a92:	37 95       	ror	r19
 a94:	27 95       	ror	r18
 a96:	ba 95       	dec	r27
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__ultoa_invert+0xa2>
 a9a:	62 0f       	add	r22, r18
 a9c:	73 1f       	adc	r23, r19
 a9e:	84 1f       	adc	r24, r20
 aa0:	95 1f       	adc	r25, r21
 aa2:	a0 1d       	adc	r26, r0
 aa4:	08 95       	ret

00000aa6 <__prologue_saves__>:
 aa6:	2f 92       	push	r2
 aa8:	3f 92       	push	r3
 aaa:	4f 92       	push	r4
 aac:	5f 92       	push	r5
 aae:	6f 92       	push	r6
 ab0:	7f 92       	push	r7
 ab2:	8f 92       	push	r8
 ab4:	9f 92       	push	r9
 ab6:	af 92       	push	r10
 ab8:	bf 92       	push	r11
 aba:	cf 92       	push	r12
 abc:	df 92       	push	r13
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	ca 1b       	sub	r28, r26
 ad0:	db 0b       	sbc	r29, r27
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	09 94       	ijmp

00000ade <__epilogue_restores__>:
 ade:	2a 88       	ldd	r2, Y+18	; 0x12
 ae0:	39 88       	ldd	r3, Y+17	; 0x11
 ae2:	48 88       	ldd	r4, Y+16	; 0x10
 ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
 aea:	8c 84       	ldd	r8, Y+12	; 0x0c
 aec:	9b 84       	ldd	r9, Y+11	; 0x0b
 aee:	aa 84       	ldd	r10, Y+10	; 0x0a
 af0:	b9 84       	ldd	r11, Y+9	; 0x09
 af2:	c8 84       	ldd	r12, Y+8	; 0x08
 af4:	df 80       	ldd	r13, Y+7	; 0x07
 af6:	ee 80       	ldd	r14, Y+6	; 0x06
 af8:	fd 80       	ldd	r15, Y+5	; 0x05
 afa:	0c 81       	ldd	r16, Y+4	; 0x04
 afc:	1b 81       	ldd	r17, Y+3	; 0x03
 afe:	aa 81       	ldd	r26, Y+2	; 0x02
 b00:	b9 81       	ldd	r27, Y+1	; 0x01
 b02:	ce 0f       	add	r28, r30
 b04:	d1 1d       	adc	r29, r1
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	f8 94       	cli
 b0a:	de bf       	out	0x3e, r29	; 62
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	cd bf       	out	0x3d, r28	; 61
 b10:	ed 01       	movw	r28, r26
 b12:	08 95       	ret

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
